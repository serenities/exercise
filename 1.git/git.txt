https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951758572072ce1dc172b4178b910d31bc7521ee4000

常用指令
cd \目录
git add --all
git commit -m "explicit"

%HOMEDRIVE%%HOMEPATH%
--cd-to-home
clone
push
pull
每天在本地各个版本库修改
再将对应版本库文件上传

在打开Git bash时，每次都是在C:\Uer路径下，每次都需要先用cd命令转换到自己需要工作的路径（cd  /f/dss）。修改打开git bash 时的默认的路径就可以不用每次都使用cd命令转换到需要管理的目录。
修改默认路径方法：右击Git Bash图标--->选择Short Cut标题栏--->修改Start in为想要管理的目录。

创建版本库
第一步创建一个空目录：
$ mkdir learngit   //create  a repository
$ cd learngit			//进入目录cd.. 返回上一级 cd返回根目录
$ pwd				//pwd命令用于显示当前目录
/Users/michael/learngit
$cd ..
ls//显示目录下的内容
第二步，通过git init命令把这个目录变成Git可以管理的仓库
gitinit

所以可以直接在其地方建立文件在和远程建立联系

add a file to git
1. git add readme.txt //修改和新建 都是先添加到暂存区
2. git commit -m "explicit"
-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）
为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件

git status//show modification
git diff readme.txt//show detail of modification
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
git add readme.txt//提交更改与添加一样
git log//命令显示从最近到最远的提交日志，我们可以看到3次提交
git log --pretty=oneline//单行显示不显示时间

git reset --hard HEAD^// ^,^^,^^^,~100回退版本
git reset --hard <版本号>//可以重新回到回溯之前的，版本号不用写全，具体版本号往上翻只要没关git

git reflog//用来记录你的每一次命令,显示每一条操作的版本号
工作区（Working Directory）//文件存放的地方
版本库（Repository）
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
//第一步可以有多条，第二步一次提交
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。（后工作区的修改不会改变）
工作区--暂存区--版本库

git checkout -- readme.txt//暂存区还原到工作区，工作区撤销
git reset HEAD file//可以把暂存区的修改撤销掉（unstage），重新放回工作区
//分支暂存区撤销 //连两步撤销或者先提交再返回上一个版本
git reset --hard HEAD^(版本号)//有条件，再没提交远程的时候
git reset//命令既可以回退版本，也可以把暂存区的修改回退到工作区 
rm test.txt//删除文件删除的源文件直接删除也可以
确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit

远程库

先建俩个库一个本地一个远程
本地Git仓库和GitHub仓库之间的传输是通过SSH加密
第一步创建SSH Key
ssh-keygen -t rsa -C "youremail@example.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
其他默认设置
把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
第3步：git remote add origin git@github.com:serenities/learngit.git   //版本库
第4步：git push -u origin master
，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
git push origin master


克隆远程库
假设我们从零开发，那么最好的方式是先创建远程库，从远程库克隆。
1 登陆GitHub，创建一个新的仓库，名字叫gitskills
2 git clone git@github.com:michaelliao/gitskills.git
当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支
现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支
git checkout -b dev origin/dev
现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程

分支管理
假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

首先创建分支
要在master下
git checkout -b dev//git checkout命令加上-b参数表示创建并切换
=git branch dev/git checkout dev//创建分支 切换到分支
git branch//命令会列出所有分支，当前分支前面会标一个*号。
之后dev分支的工作完成，我们就可以切换回master分支
git checkout master //切入主干
再之后git merge dev//把dev分支的工作成果合并到master分支上
//git merge命令用于合并指定分支到当前分支。
合并完成后，就可以放心地删除dev分支
git branch -d dev
因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。


合并分支冲突
当两分支都有改变以后，并且两分支有改变的不一样的地方
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
1 git merge
2 fix conflict
3 add
4 commit
5 delete featurel

git log --graph --pretty=oneline --abbrev-commit//看到分支合并情况


分支管理策略
合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
git checkout -b dev//首先，仍然创建并切换dev分支
git add readme.txt//修改readme.txt文件，并提交一个新的commit：
git checkout master//我们切换回master
git merge --no-ff -m "merge with no-ff" dev//合并dev分支，请注意--no-ff参数，表示禁用Fast forward
git log --graph --pretty=oneline --abbrev-commit//合并后，我们用git log看看分支历史
*   7825a50 merge with no-ff
|\
| * 6224937 add merge
|/
*   59bc1cb conflict fixed

分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

Bug分支
有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
 git stash
 现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
 首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
 git checkout master
 git checkout -b issue-101
修复后提交
 git add readme.txt 
 git commit -m "fix bug 101"
 修复完成后，切换到master分支，并完成合并，最后删除issue-101分支
 git checkout master
 git merge --no-ff -m "merged bug fix 101" issue-101
 git branch -d issue-101
 接着回到dev分支干活了！
 git checkout dev
 git status
 工作区是干净的，刚才的工作现场存到哪去了？用git stash list  git stash list
 stash@{0}: WIP on dev: 6224937 add merge
 工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法
 一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了
git stash pop


开辟feature分支
软件开发中，总有无穷无尽的新的功能要不断添加进来。
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
git checkout -b feature-vulcan
开发完毕
git add vulcan.py
git status
git commit -m "add feature vulcan"
切回dev，准备合并：
 git checkout dev
 一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。
但是，
就在此时，接到上级命令，因经费不足，新功能必须取消！
虽然白干了，但是这个分支还是必须就地销毁：
git branch -d feature-vulcan
git branch -D feature-vulcan//强行删除


多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
要查看远程库的信息，用git remote
git remote -v显示更详细的信息//显示所有可以抓取和推送的分支

改变远程关联库
三种方式都可以。
1. 修改命令
git remte origin set-url URL
2.先删后加
git remote rm origin 
git remote add origin git@github.com:Liutos/foobar.git 
3. 直接修改config文件

推送分支
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
git push origin master
如果要推送其他分支，比如dev
git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！

抓取分支
小伙伴对一个分支推送以后你也推送
git push origin dev
推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
git pull
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
git branch --set-upstream dev origin/dev
再pull
git pull
这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push
git commit -m "merge & fix hello.py"
git push origin dev
因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

标签管理
发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
标签=commit号的指针 提交
创建标签
在Git中打标签非常简单，首先，切换到需要打标签的分支上
git branch//显示分支
git checkout master
然后，敲命令git tag <name>就可以打一个新标签
git tag v1.0
可以用命令git tag查看所有标签 标签按照字母顺序列出
可以用git show <tagname>查看标签信息
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字
如果标签打错了，也可以删除
git tag -d v0.1
因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
如果要推送某个标签到远程，使用命令git push origin <tagname>
 git push origin v1.0
 或者，一次性推送全部尚未推送到远程的本地标签：
 git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除
git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下
git push origin :refs/tags/v0.9

自定义git
让Git显示颜色
 git config --global color.ui true
 
忽略特殊文件
Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini
# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build
# My configurations:
db.ini
deploy_key_rsa
最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean

你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了
果你确实想添加该文件，可以用-f强制添加到Git
git add -f App.class
或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
$ git check-ignore -v App.class
.gitignore:3:*.class    App.class
Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。

配置别名
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375234012342f90be1fc4d81446c967bbdc19e7c03d3000
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git lg
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中
